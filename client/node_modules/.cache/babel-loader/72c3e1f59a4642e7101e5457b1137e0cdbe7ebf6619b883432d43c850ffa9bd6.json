{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport jwtDecode from \"jwt-decode\";\nexport default class UserStore {\n  constructor() {\n    this._isAuth = false;\n    this._user = {};\n    makeAutoObservable(this);\n    this.checkValidToken = this.checkValidToken.bind(this);\n  }\n  checkValidToken() {\n    let isExpired = true; // По умолчанию считаем, что токен недействителен\n\n    // Получаем токен из localStorage\n    const token = localStorage.getItem('token');\n\n    // Если токен существует, пытаемся его декодировать\n    if (token) {\n      const decodedToken = jwtDecode(token);\n      const dateNow = new Date();\n\n      // Проверяем, не истек ли срок действия токена\n      if (decodedToken.exp > dateNow.getTime()) {\n        isExpired = false;\n      }\n    }\n    return isExpired;\n  }\n  setIsAuth(bool) {\n    this._isAuth = bool;\n  }\n  setUser(user) {\n    this._user = user;\n  }\n  get isAuth() {\n    return this._isAuth;\n  }\n  get user() {\n    // Исправлено на user, чтобы не было конфликта с _user\n    return this._user;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","jwtDecode","UserStore","constructor","_isAuth","_user","checkValidToken","bind","isExpired","token","localStorage","getItem","decodedToken","dateNow","Date","exp","getTime","setIsAuth","bool","setUser","user","isAuth"],"sources":["C:/Users/18062/OneDrive/Рабочий стол/ВУУУУУУУУУУУЗ/3 КУРС 2 6 СЕМАК/12312312313213123/onlineStore-master/onlineStore-master/client/src/store/UserStore.js"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport jwtDecode from \"jwt-decode\";\n\nexport default class UserStore {\n    constructor() {\n        this._isAuth = false;\n        this._user = {};\n        makeAutoObservable(this);\n        this.checkValidToken = this.checkValidToken.bind(this);\n    }\n\n    checkValidToken() {\n        let isExpired = true; // По умолчанию считаем, что токен недействителен\n\n        // Получаем токен из localStorage\n        const token = localStorage.getItem('token');\n\n        // Если токен существует, пытаемся его декодировать\n        if (token) {\n            const decodedToken = jwtDecode(token);\n            const dateNow = new Date();\n\n            // Проверяем, не истек ли срок действия токена\n            if (decodedToken.exp > dateNow.getTime()) {\n                isExpired = false;\n            }\n        }\n\n        return isExpired;\n    }\n\n    setIsAuth(bool) {\n        this._isAuth = bool;\n    }\n\n    setUser(user) {\n        this._user = user;\n    }\n\n    get isAuth() {\n        return this._isAuth;\n    }\n\n    get user() { // Исправлено на user, чтобы не было конфликта с _user\n        return this._user;\n    }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,MAAM;AACzC,OAAOC,SAAS,MAAM,YAAY;AAElC,eAAe,MAAMC,SAAS,CAAC;EAC3BC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACfL,kBAAkB,CAAC,IAAI,CAAC;IACxB,IAAI,CAACM,eAAe,GAAG,IAAI,CAACA,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC;EAC1D;EAEAD,eAAeA,CAAA,EAAG;IACd,IAAIE,SAAS,GAAG,IAAI,CAAC,CAAC;;IAEtB;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;IAE3C;IACA,IAAIF,KAAK,EAAE;MACP,MAAMG,YAAY,GAAGX,SAAS,CAACQ,KAAK,CAAC;MACrC,MAAMI,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC;;MAE1B;MACA,IAAIF,YAAY,CAACG,GAAG,GAAGF,OAAO,CAACG,OAAO,CAAC,CAAC,EAAE;QACtCR,SAAS,GAAG,KAAK;MACrB;IACJ;IAEA,OAAOA,SAAS;EACpB;EAEAS,SAASA,CAACC,IAAI,EAAE;IACZ,IAAI,CAACd,OAAO,GAAGc,IAAI;EACvB;EAEAC,OAAOA,CAACC,IAAI,EAAE;IACV,IAAI,CAACf,KAAK,GAAGe,IAAI;EACrB;EAEA,IAAIC,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACjB,OAAO;EACvB;EAEA,IAAIgB,IAAIA,CAAA,EAAG;IAAE;IACT,OAAO,IAAI,CAACf,KAAK;EACrB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}